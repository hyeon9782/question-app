export const questionList = [
  {
    id: 0,
    question: "HTTP와 HTTPS는 무엇인가요?",
    answer:
      "HTTP는 HyperText Transfer Protocol의 약자로, 웹에서 데이터를 주고받기 위한 규약입니다. 하지만 HTTP는 정보가 평문으로 전송되기 때문에 보안적으로 취약합니다. 그래서 나타난 것이 HTTPS입니다. HTTPS는 HTTP Secure의 약자로 보안이 강화된 HTTP입니다. SSL/TSL 프로토콜을 이용해 데이터를 암호화합니다.",
    category: "Network",
  },
  {
    id: 1,
    question: "프로토콜은 무엇인가요?",
    answer:
      "프로토콜은 통신을 원할하게 하기 위해 어떻게 데이터를 주고받을지에 대한 규칙과 규약의 집합입니다.",
    category: "Network",
  },
  {
    id: 2,
    question: "대칭키, 비대칭키 암호화 방식에 대해 설명해주세요.",
    answer:
      "대칭키 암호화는 하나의 키를 사용해 데이터를 암호화하고 해독합니다. 이는 송신자와 수신자가 동일한 비밀 키를 공유해야 한다는 단점이 있습니다. 비대칭키 암호화는 공개 키와 개인 키 두개의 키를 사용합니다. 공개 키는 누구나 알 수 있지만, 해당 키로 암호화된 데이터는 개인 키로만 해독이 가능합니다. 비대칭키는 키를 공유하지 않아도 되기 때문에 대칭키보다 안정성이 향상됩니다.",
    category: "Network",
  },
  {
    id: 3,
    question: "SSL Handshake에 대해서 설명해주세요.",
    answer:
      "클라이언트와 서버 간에 안전한 통신을 확립하기 위해 SSL/TLS 프로토콜에서 사용되는 과정 중 하나가 SSL Handshake입니다. 우선 클라이언트가 서버에게 연결 요청하면 클라이언트는 지원하는 암호화 알고리즘과 다른 연결 관련 정보를 보냅니다. 서버는 클라이언트의 연결 관련 정보와 서버가 지원하는 암호화 알고리즘과 연결 관련 정보를 보냅니다. 서버는 클라이언트에게 자신의 디지털 인증서를 보내고, 클라이언트는 이 인증서의 유효성을 확인하고, 서버가 신뢰할 수 있는 것인지를 판단합니다. 클라이언트와 서버는 서로에게 사용할 대칭키를 교환하기 위한 과정을 진행합니다. 이 단계에서는 공개 키 암호화가 사용됩니다. 그 후 클라이언트와 서버는 앞서 교환한 정보를 사용하여 각자 계산한 해시값을 서로에게 보냅니다. 이를 통해 상호 간의 통신이 제대로 설정됐는지를 확인합니다. 이렇게 SSL Handshake가 완료되면 클라이언트와 서버는 안전한 통신을 위한 공유된 대칭키를 가지고, 이를 통해 메시지를 암호화 및 복호화할 수 있게 됩니다.",
    category: "Network",
  },
  {
    id: 0,
    question: "SSL, TLS에 대해서 설명해주세요.",
    answer:
      "HTTP는 HyperText Transfer Protocol의 약자로, 웹에서 데이터를 주고받기 위한 규약입니다. 하지만 HTTP는 정보가 평문으로 전송되기 때문에 보안적으로 취약합니다. 그래서 나타난 것이 HTTPS입니다. HTTPS는 HTTP Secure의 약자로 보안이 강화된 HTTP입니다. SSL/TSL 프로토콜을 이용해 데이터를 암호화합니다.",
    category: "Network",
  },
  {
    id: 1,
    question: "REST API란?",
    answer:
      "프로토콜은 통신을 원할하게 하기 위해 어떻게 데이터를 주고받을지에 대한 규칙과 규약의 집합입니다.",
    category: "Network",
  },
  {
    id: 2,
    question: "API란?",
    answer:
      "대칭키 암호화는 하나의 키를 사용해 데이터를 암호화하고 해독합니다. 이는 송신자와 수신자가 동일한 비밀 키를 공유해야 한다는 단점이 있습니다. 비대칭키 암호화는 공개 키와 개인 키 두개의 키를 사용합니다. 공개 키는 누구나 알 수 있지만, 해당 키로 암호화된 데이터는 개인 키로만 해독이 가능합니다. 비대칭키는 키를 공유하지 않아도 되기 때문에 대칭키보다 안정성이 향상됩니다.",
    category: "Network",
  },
  {
    id: 3,
    question: "RESTFul이란 무엇인가요?",
    answer:
      "클라이언트와 서버 간에 안전한 통신을 확립하기 위해 SSL/TLS 프로토콜에서 사용되는 과정 중 하나가 SSL Handshake입니다. 우선 클라이언트가 서버에게 연결 요청하면 클라이언트는 지원하는 암호화 알고리즘과 다른 연결 관련 정보를 보냅니다. 서버는 클라이언트의 연결 관련 정보와 서버가 지원하는 암호화 알고리즘과 연결 관련 정보를 보냅니다. 서버는 클라이언트에게 자신의 디지털 인증서를 보내고, 클라이언트는 이 인증서의 유효성을 확인하고, 서버가 신뢰할 수 있는 것인지를 판단합니다. 클라이언트와 서버는 서로에게 사용할 대칭키를 교환하기 위한 과정을 진행합니다. 이 단계에서는 공개 키 암호화가 사용됩니다. 그 후 클라이언트와 서버는 앞서 교환한 정보를 사용하여 각자 계산한 해시값을 서로에게 보냅니다. 이를 통해 상호 간의 통신이 제대로 설정됐는지를 확인합니다. 이렇게 SSL Handshake가 완료되면 클라이언트와 서버는 안전한 통신을 위한 공유된 대칭키를 가지고, 이를 통해 메시지를 암호화 및 복호화할 수 있게 됩니다.",
    category: "Network",
  },
  {
    id: 0,
    question: "HTTP Method PUT과 PATCH의 차이는 무엇인가요?",
    answer:
      "HTTP는 HyperText Transfer Protocol의 약자로, 웹에서 데이터를 주고받기 위한 규약입니다. 하지만 HTTP는 정보가 평문으로 전송되기 때문에 보안적으로 취약합니다. 그래서 나타난 것이 HTTPS입니다. HTTPS는 HTTP Secure의 약자로 보안이 강화된 HTTP입니다. SSL/TSL 프로토콜을 이용해 데이터를 암호화합니다.",
    category: "Network",
  },
  {
    id: 1,
    question: "HTTP의 버전별로 차이점을 설명해주세요.",
    answer:
      "프로토콜은 통신을 원할하게 하기 위해 어떻게 데이터를 주고받을지에 대한 규칙과 규약의 집합입니다.",
    category: "Network",
  },
  {
    id: 2,
    question: "지속적 연결에 대해 더 자세히 설명해주세요.",
    answer:
      "대칭키 암호화는 하나의 키를 사용해 데이터를 암호화하고 해독합니다. 이는 송신자와 수신자가 동일한 비밀 키를 공유해야 한다는 단점이 있습니다. 비대칭키 암호화는 공개 키와 개인 키 두개의 키를 사용합니다. 공개 키는 누구나 알 수 있지만, 해당 키로 암호화된 데이터는 개인 키로만 해독이 가능합니다. 비대칭키는 키를 공유하지 않아도 되기 때문에 대칭키보다 안정성이 향상됩니다.",
    category: "Network",
  },
  {
    id: 3,
    question: "웹 서버와 WAS의 차이점을 설명해주세요.",
    answer:
      "클라이언트와 서버 간에 안전한 통신을 확립하기 위해 SSL/TLS 프로토콜에서 사용되는 과정 중 하나가 SSL Handshake입니다. 우선 클라이언트가 서버에게 연결 요청하면 클라이언트는 지원하는 암호화 알고리즘과 다른 연결 관련 정보를 보냅니다. 서버는 클라이언트의 연결 관련 정보와 서버가 지원하는 암호화 알고리즘과 연결 관련 정보를 보냅니다. 서버는 클라이언트에게 자신의 디지털 인증서를 보내고, 클라이언트는 이 인증서의 유효성을 확인하고, 서버가 신뢰할 수 있는 것인지를 판단합니다. 클라이언트와 서버는 서로에게 사용할 대칭키를 교환하기 위한 과정을 진행합니다. 이 단계에서는 공개 키 암호화가 사용됩니다. 그 후 클라이언트와 서버는 앞서 교환한 정보를 사용하여 각자 계산한 해시값을 서로에게 보냅니다. 이를 통해 상호 간의 통신이 제대로 설정됐는지를 확인합니다. 이렇게 SSL Handshake가 완료되면 클라이언트와 서버는 안전한 통신을 위한 공유된 대칭키를 가지고, 이를 통해 메시지를 암호화 및 복호화할 수 있게 됩니다.",
    category: "Network",
  },
  {
    id: 0,
    question: "URL과 URI의 차이점에 대해 설명해주세요.",
    answer:
      "HTTP는 HyperText Transfer Protocol의 약자로, 웹에서 데이터를 주고받기 위한 규약입니다. 하지만 HTTP는 정보가 평문으로 전송되기 때문에 보안적으로 취약합니다. 그래서 나타난 것이 HTTPS입니다. HTTPS는 HTTP Secure의 약자로 보안이 강화된 HTTP입니다. SSL/TSL 프로토콜을 이용해 데이터를 암호화합니다.",
    category: "Network",
  },
  {
    id: 1,
    question: "브라우저에서 CORS의 기본 동작에 대해서 설명해주세요.",
    answer:
      "프로토콜은 통신을 원할하게 하기 위해 어떻게 데이터를 주고받을지에 대한 규칙과 규약의 집합입니다.",
    category: "Network",
  },
  {
    id: 2,
    question: "경험한 CORS 에러에 대해서 설명해주세요.",
    answer:
      "대칭키 암호화는 하나의 키를 사용해 데이터를 암호화하고 해독합니다. 이는 송신자와 수신자가 동일한 비밀 키를 공유해야 한다는 단점이 있습니다. 비대칭키 암호화는 공개 키와 개인 키 두개의 키를 사용합니다. 공개 키는 누구나 알 수 있지만, 해당 키로 암호화된 데이터는 개인 키로만 해독이 가능합니다. 비대칭키는 키를 공유하지 않아도 되기 때문에 대칭키보다 안정성이 향상됩니다.",
    category: "Network",
  },
  {
    id: 3,
    question: "SOP가 무엇이고 왜 필요할까요?",
    answer:
      "클라이언트와 서버 간에 안전한 통신을 확립하기 위해 SSL/TLS 프로토콜에서 사용되는 과정 중 하나가 SSL Handshake입니다. 우선 클라이언트가 서버에게 연결 요청하면 클라이언트는 지원하는 암호화 알고리즘과 다른 연결 관련 정보를 보냅니다. 서버는 클라이언트의 연결 관련 정보와 서버가 지원하는 암호화 알고리즘과 연결 관련 정보를 보냅니다. 서버는 클라이언트에게 자신의 디지털 인증서를 보내고, 클라이언트는 이 인증서의 유효성을 확인하고, 서버가 신뢰할 수 있는 것인지를 판단합니다. 클라이언트와 서버는 서로에게 사용할 대칭키를 교환하기 위한 과정을 진행합니다. 이 단계에서는 공개 키 암호화가 사용됩니다. 그 후 클라이언트와 서버는 앞서 교환한 정보를 사용하여 각자 계산한 해시값을 서로에게 보냅니다. 이를 통해 상호 간의 통신이 제대로 설정됐는지를 확인합니다. 이렇게 SSL Handshake가 완료되면 클라이언트와 서버는 안전한 통신을 위한 공유된 대칭키를 가지고, 이를 통해 메시지를 암호화 및 복호화할 수 있게 됩니다.",
    category: "Network",
  },
  {
    id: 3,
    question: "OSI 7 layer와 각 계층에 대해 설명해주세요.",
    answer:
      "클라이언트와 서버 간에 안전한 통신을 확립하기 위해 SSL/TLS 프로토콜에서 사용되는 과정 중 하나가 SSL Handshake입니다. 우선 클라이언트가 서버에게 연결 요청하면 클라이언트는 지원하는 암호화 알고리즘과 다른 연결 관련 정보를 보냅니다. 서버는 클라이언트의 연결 관련 정보와 서버가 지원하는 암호화 알고리즘과 연결 관련 정보를 보냅니다. 서버는 클라이언트에게 자신의 디지털 인증서를 보내고, 클라이언트는 이 인증서의 유효성을 확인하고, 서버가 신뢰할 수 있는 것인지를 판단합니다. 클라이언트와 서버는 서로에게 사용할 대칭키를 교환하기 위한 과정을 진행합니다. 이 단계에서는 공개 키 암호화가 사용됩니다. 그 후 클라이언트와 서버는 앞서 교환한 정보를 사용하여 각자 계산한 해시값을 서로에게 보냅니다. 이를 통해 상호 간의 통신이 제대로 설정됐는지를 확인합니다. 이렇게 SSL Handshake가 완료되면 클라이언트와 서버는 안전한 통신을 위한 공유된 대칭키를 가지고, 이를 통해 메시지를 암호화 및 복호화할 수 있게 됩니다.",
    category: "Network",
  },
  {
    id: 3,
    question: "TCP/IP란 무엇인가요?",
    answer:
      "클라이언트와 서버 간에 안전한 통신을 확립하기 위해 SSL/TLS 프로토콜에서 사용되는 과정 중 하나가 SSL Handshake입니다. 우선 클라이언트가 서버에게 연결 요청하면 클라이언트는 지원하는 암호화 알고리즘과 다른 연결 관련 정보를 보냅니다. 서버는 클라이언트의 연결 관련 정보와 서버가 지원하는 암호화 알고리즘과 연결 관련 정보를 보냅니다. 서버는 클라이언트에게 자신의 디지털 인증서를 보내고, 클라이언트는 이 인증서의 유효성을 확인하고, 서버가 신뢰할 수 있는 것인지를 판단합니다. 클라이언트와 서버는 서로에게 사용할 대칭키를 교환하기 위한 과정을 진행합니다. 이 단계에서는 공개 키 암호화가 사용됩니다. 그 후 클라이언트와 서버는 앞서 교환한 정보를 사용하여 각자 계산한 해시값을 서로에게 보냅니다. 이를 통해 상호 간의 통신이 제대로 설정됐는지를 확인합니다. 이렇게 SSL Handshake가 완료되면 클라이언트와 서버는 안전한 통신을 위한 공유된 대칭키를 가지고, 이를 통해 메시지를 암호화 및 복호화할 수 있게 됩니다.",
    category: "Network",
  },
  {
    id: 3,
    question: "TCP와 UDP의 차이점에 대해서 설명해보세요.",
    answer:
      "클라이언트와 서버 간에 안전한 통신을 확립하기 위해 SSL/TLS 프로토콜에서 사용되는 과정 중 하나가 SSL Handshake입니다. 우선 클라이언트가 서버에게 연결 요청하면 클라이언트는 지원하는 암호화 알고리즘과 다른 연결 관련 정보를 보냅니다. 서버는 클라이언트의 연결 관련 정보와 서버가 지원하는 암호화 알고리즘과 연결 관련 정보를 보냅니다. 서버는 클라이언트에게 자신의 디지털 인증서를 보내고, 클라이언트는 이 인증서의 유효성을 확인하고, 서버가 신뢰할 수 있는 것인지를 판단합니다. 클라이언트와 서버는 서로에게 사용할 대칭키를 교환하기 위한 과정을 진행합니다. 이 단계에서는 공개 키 암호화가 사용됩니다. 그 후 클라이언트와 서버는 앞서 교환한 정보를 사용하여 각자 계산한 해시값을 서로에게 보냅니다. 이를 통해 상호 간의 통신이 제대로 설정됐는지를 확인합니다. 이렇게 SSL Handshake가 완료되면 클라이언트와 서버는 안전한 통신을 위한 공유된 대칭키를 가지고, 이를 통해 메시지를 암호화 및 복호화할 수 있게 됩니다.",
    category: "Network",
  },
  {
    id: 3,
    question: "패킷이란 무엇인가요?",
    answer:
      "클라이언트와 서버 간에 안전한 통신을 확립하기 위해 SSL/TLS 프로토콜에서 사용되는 과정 중 하나가 SSL Handshake입니다. 우선 클라이언트가 서버에게 연결 요청하면 클라이언트는 지원하는 암호화 알고리즘과 다른 연결 관련 정보를 보냅니다. 서버는 클라이언트의 연결 관련 정보와 서버가 지원하는 암호화 알고리즘과 연결 관련 정보를 보냅니다. 서버는 클라이언트에게 자신의 디지털 인증서를 보내고, 클라이언트는 이 인증서의 유효성을 확인하고, 서버가 신뢰할 수 있는 것인지를 판단합니다. 클라이언트와 서버는 서로에게 사용할 대칭키를 교환하기 위한 과정을 진행합니다. 이 단계에서는 공개 키 암호화가 사용됩니다. 그 후 클라이언트와 서버는 앞서 교환한 정보를 사용하여 각자 계산한 해시값을 서로에게 보냅니다. 이를 통해 상호 간의 통신이 제대로 설정됐는지를 확인합니다. 이렇게 SSL Handshake가 완료되면 클라이언트와 서버는 안전한 통신을 위한 공유된 대칭키를 가지고, 이를 통해 메시지를 암호화 및 복호화할 수 있게 됩니다.",
    category: "Network",
  },
  {
    id: 3,
    question: "TCP에서 신뢰성을 보장하는 방법을 설명해보세요.",
    answer:
      "클라이언트와 서버 간에 안전한 통신을 확립하기 위해 SSL/TLS 프로토콜에서 사용되는 과정 중 하나가 SSL Handshake입니다. 우선 클라이언트가 서버에게 연결 요청하면 클라이언트는 지원하는 암호화 알고리즘과 다른 연결 관련 정보를 보냅니다. 서버는 클라이언트의 연결 관련 정보와 서버가 지원하는 암호화 알고리즘과 연결 관련 정보를 보냅니다. 서버는 클라이언트에게 자신의 디지털 인증서를 보내고, 클라이언트는 이 인증서의 유효성을 확인하고, 서버가 신뢰할 수 있는 것인지를 판단합니다. 클라이언트와 서버는 서로에게 사용할 대칭키를 교환하기 위한 과정을 진행합니다. 이 단계에서는 공개 키 암호화가 사용됩니다. 그 후 클라이언트와 서버는 앞서 교환한 정보를 사용하여 각자 계산한 해시값을 서로에게 보냅니다. 이를 통해 상호 간의 통신이 제대로 설정됐는지를 확인합니다. 이렇게 SSL Handshake가 완료되면 클라이언트와 서버는 안전한 통신을 위한 공유된 대칭키를 가지고, 이를 통해 메시지를 암호화 및 복호화할 수 있게 됩니다.",
    category: "Network",
  },
  {
    id: 3,
    question: "3 way-handshake와 4 way-handshake에 대해 설명해주세요.",
    answer:
      "클라이언트와 서버 간에 안전한 통신을 확립하기 위해 SSL/TLS 프로토콜에서 사용되는 과정 중 하나가 SSL Handshake입니다. 우선 클라이언트가 서버에게 연결 요청하면 클라이언트는 지원하는 암호화 알고리즘과 다른 연결 관련 정보를 보냅니다. 서버는 클라이언트의 연결 관련 정보와 서버가 지원하는 암호화 알고리즘과 연결 관련 정보를 보냅니다. 서버는 클라이언트에게 자신의 디지털 인증서를 보내고, 클라이언트는 이 인증서의 유효성을 확인하고, 서버가 신뢰할 수 있는 것인지를 판단합니다. 클라이언트와 서버는 서로에게 사용할 대칭키를 교환하기 위한 과정을 진행합니다. 이 단계에서는 공개 키 암호화가 사용됩니다. 그 후 클라이언트와 서버는 앞서 교환한 정보를 사용하여 각자 계산한 해시값을 서로에게 보냅니다. 이를 통해 상호 간의 통신이 제대로 설정됐는지를 확인합니다. 이렇게 SSL Handshake가 완료되면 클라이언트와 서버는 안전한 통신을 위한 공유된 대칭키를 가지고, 이를 통해 메시지를 암호화 및 복호화할 수 있게 됩니다.",
    category: "Network",
  },
  {
    id: 3,
    question: "프록시란 무엇일까요?",
    answer:
      "클라이언트와 서버 간에 안전한 통신을 확립하기 위해 SSL/TLS 프로토콜에서 사용되는 과정 중 하나가 SSL Handshake입니다. 우선 클라이언트가 서버에게 연결 요청하면 클라이언트는 지원하는 암호화 알고리즘과 다른 연결 관련 정보를 보냅니다. 서버는 클라이언트의 연결 관련 정보와 서버가 지원하는 암호화 알고리즘과 연결 관련 정보를 보냅니다. 서버는 클라이언트에게 자신의 디지털 인증서를 보내고, 클라이언트는 이 인증서의 유효성을 확인하고, 서버가 신뢰할 수 있는 것인지를 판단합니다. 클라이언트와 서버는 서로에게 사용할 대칭키를 교환하기 위한 과정을 진행합니다. 이 단계에서는 공개 키 암호화가 사용됩니다. 그 후 클라이언트와 서버는 앞서 교환한 정보를 사용하여 각자 계산한 해시값을 서로에게 보냅니다. 이를 통해 상호 간의 통신이 제대로 설정됐는지를 확인합니다. 이렇게 SSL Handshake가 완료되면 클라이언트와 서버는 안전한 통신을 위한 공유된 대칭키를 가지고, 이를 통해 메시지를 암호화 및 복호화할 수 있게 됩니다.",
    category: "Network",
  },
  {
    id: 3,
    question: "프록시는 어떨 때 사용하는 것이 좋을까요?",
    answer:
      "클라이언트와 서버 간에 안전한 통신을 확립하기 위해 SSL/TLS 프로토콜에서 사용되는 과정 중 하나가 SSL Handshake입니다. 우선 클라이언트가 서버에게 연결 요청하면 클라이언트는 지원하는 암호화 알고리즘과 다른 연결 관련 정보를 보냅니다. 서버는 클라이언트의 연결 관련 정보와 서버가 지원하는 암호화 알고리즘과 연결 관련 정보를 보냅니다. 서버는 클라이언트에게 자신의 디지털 인증서를 보내고, 클라이언트는 이 인증서의 유효성을 확인하고, 서버가 신뢰할 수 있는 것인지를 판단합니다. 클라이언트와 서버는 서로에게 사용할 대칭키를 교환하기 위한 과정을 진행합니다. 이 단계에서는 공개 키 암호화가 사용됩니다. 그 후 클라이언트와 서버는 앞서 교환한 정보를 사용하여 각자 계산한 해시값을 서로에게 보냅니다. 이를 통해 상호 간의 통신이 제대로 설정됐는지를 확인합니다. 이렇게 SSL Handshake가 완료되면 클라이언트와 서버는 안전한 통신을 위한 공유된 대칭키를 가지고, 이를 통해 메시지를 암호화 및 복호화할 수 있게 됩니다.",
    category: "Network",
  },
];
